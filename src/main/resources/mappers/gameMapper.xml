<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 다른 mapper와 중복되지 않도록 네임스페이스 기재 -->
<mapper namespace="game">

	<select id="gameListCount" resultType="int">
		select count(*)
		from game
		where del = 'n'
	</select>

	<select id="gameList" resultType="gameDto">
		SELECT gnum, bggnum, GAMETITLE, GAMETITLE_ENG, TOTALVIEWCOUNT, RELEASE_YEAR, gamephoto_url, rank, rn,
		vcnt, rate, weight
		FROM (
		SELECT a.gnum, a.bggnum, a.gametitle, a.gametitle_eng, a.totalviewcount, a.release_year,
		a.gamephoto_url, a.rank, a.vcnt, rownum rn, a.rate, a.weight
		FROM (
		SELECT g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.totalviewcount, g.release_year,
		ga.fullname AS gamephoto_url, RANK() OVER (ORDER BY gv.vcnt DESC) AS rank, gv.vcnt,
		ROW_NUMBER() OVER (PARTITION BY g.gnum ORDER BY gv.vcnt DESC) AS game_rownum,
		gr.rate, gr.weight
		FROM game g
		LEFT JOIN (
		SELECT gnum, fullname
		FROM (
		SELECT ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
		gnum, fullname
		FROM game_attach
		)
		WHERE rnum = 1
		) ga
		ON g.gnum = ga.gnum
		LEFT JOIN (
		SELECT gnum, SUM(VIEWCOUNT) AS vcnt
		FROM VIEWCOUNT_DATE
		WHERE<![CDATA[
            LOG_DATE >= NEXT_DAY(sysdate - 15, '일')
            AND LOG_DATE < NEXT_DAY(sysdate - 8, '일')
        ]]>
		GROUP BY gnum, LOG_DATE
		HAVING SUM(VIEWCOUNT) IS NOT NULL
		ORDER BY vcnt DESC NULLS LAST
		) gv
		ON g.gnum = gv.gnum
		LEFT JOIN (
		SELECT gnum, avg(rating) as rate, avg(weight) as weight
		FROM game_rating
		GROUP BY gnum
		) gr
		ON g.gnum = gr.gnum
		WHERE g.del = 'n'
		ORDER BY rank, gnum
		) a
		WHERE game_rownum = 1
		)

		WHERE rn BETWEEN #{start} AND #{end}
	</select>

	<select id="gameList_vcnt" resultType="gameDto">
		SELECT gnum, bggnum, GAMETITLE, GAMETITLE_ENG, RELEASE_YEAR, gamephoto_url, rank, rn, totalviewcount,
        rate, weight
FROM (
        SELECT a.gnum, a.bggnum, a.gametitle, a.gametitle_eng, a.release_year,a.totalviewcount,
                a.gamephoto_url, a.rank, rownum rn, a.rate, a.weight
        FROM (
                SELECT g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.release_year,g.totalviewcount,
                        ga.fullname AS gamephoto_url, RANK() OVER (ORDER BY g.totalviewcount DESC) AS rank,
                        gr.rate, gr.weight
                FROM game g --게임
                LEFT JOIN (
                            SELECT gnum, fullname
                            FROM (
                                    SELECT ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
                                            gnum, fullname
                                    FROM game_attach
                                    )
                            WHERE rnum = 1
                            ) ga --사진
                ON g.gnum = ga.gnum
                LEFT JOIN (
                            SELECT gnum, avg(rating) as rate, avg(weight) as weight
                            FROM game_rating
                            GROUP BY gnum
                            ) gr
                ON g.gnum = gr.gnum
                WHERE g.del = 'n'
                ORDER BY rank, gnum
                ) a
        )

WHERE rn BETWEEN #{start} AND #{end}
	</select>

	<select id="gameList_rate" resultType="gameDto">
		SELECT gnum, bggnum, GAMETITLE, GAMETITLE_ENG, TOTALVIEWCOUNT, RELEASE_YEAR, gamephoto_url, rank, rn,
		rate, weight
FROM (
        SELECT a.gnum, a.bggnum, a.gametitle, a.gametitle_eng, a.totalviewcount, a.release_year,
                a.gamephoto_url, a.rank, a.rate, a.weight, rownum rn
        FROM (
                SELECT g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.totalviewcount, g.release_year,
                        ga.fullname AS gamephoto_url, RANK() OVER (ORDER BY gr.rate DESC nulls last) AS rank,
                        gr.rate, gr.weight
                FROM game g
                LEFT JOIN (
                            SELECT gnum, fullname
                            FROM (
                                    SELECT ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
                                            gnum, fullname
                                    FROM game_attach
                                    )
                            WHERE rnum = 1
                            ) ga
                ON g.gnum = ga.gnum
                LEFT JOIN (
                            SELECT gnum, avg(rating) as rate, avg(weight) as weight
                            FROM game_rating
                            GROUP BY gnum
                            ) gr
                ON g.gnum = gr.gnum
                WHERE g.del = 'n'
                ORDER BY rank, gnum
                ) a
        )
WHERE rn BETWEEN #{start} AND #{end}
	</select>
	
	<insert id="gameInsert">
			 insert into game
			(gnum,bggnum,gametitle,gametitle_eng,players,playtime,
			 ages,language,release_year,create_user)
		values
			(seq_game.nextval,#{bggnum},#{gametitle},#{gametitle_eng},#{players},
			 #{playtime},#{ages},#{language},#{release_year},#{create_user})
	</insert>
	
	<update id="increaseViewcnt">
		update game
		set viewcount = viewcount+1, totalviewcount = totalviewcount+1
		where gnum=#{gnum}
	</update>
	
	<select id="view" resultType="gameDto">

         select g.gnum, bggnum, gametitle, gametitle_eng, players, playtime, ages, language,
         	   release_year, g.create_date, totalviewcount, ga.fullname gamephoto_url
		  from game g
		  left join (
        	   select gnum, fullname
              from (select row_number() over(partition by gnum order by create_date desc) rnum, gnum, fullname
                    from game_attach )
             where rnum = 1 ) ga on g.gnum = ga.gnum
      where g.gnum=#{gnum}

	</select>

	<select id="getAuto" resultType="gameDto">
		select GNUM, BGGNUM, GAMETITLE_ENG, GAMETITLE, gamephoto_url, rn
		from(select 	g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, ga.fullname gamephoto_url, rownum rn
		from 	game g
		left join 	(
				select 	gnum, fullname
                from 	(
                		select row_number() over(partition by gnum order by create_date desc) rnum, gnum, fullname
                        from game_attach
                       	) a
                where rnum = 1
                ) ga
        on 		g.GNUM = ga.GNUM
		where 	gametitle like '%'||#{input}||'%' and g.del = 'n'
		order by case when gametitle like '%'||#{input}||'%' then 1 else 2 end, gametitle) a
		WHERE rn BETWEEN 1 AND 5
	</select>

	<!--첨부파일 정보 저장-->
	<insert id="addAttach">
		insert into game_attach (fullname, gnum, create_user)
		values (#{fullName}, seq_game.currval, #{userid})
	</insert>

	<delete id="deleteFile">
		delete from game_attach where fullName=#{fileName}
	</delete>

	<select id="filteredListCount" resultType="int">
	<bind name="mappingTable" value="'game_'+filter"/>
		select count(*)
		<choose>
			<when test="filter != null and 'gamecategory'.equalsIgnoreCase(filter)">
				from game_category mapping, category filter
			</when>
			<otherwise>
				from ${mappingTable} mapping, ${filter} filter
			</otherwise>
		</choose>
		, (select gnum from game where del='n') g
		<where>
			<if test="filter != null and 'artist'.equalsIgnoreCase(filter)">
				mapping.anum = filter.anum and filter.anum=#{num}
			</if>
			<if test="filter != null and 'gamecategory'.equalsIgnoreCase(filter)">
				mapping.cnum = filter.cnum and filter.cnum=#{num}
			</if>
			<if test="filter != null and 'designer'.equalsIgnoreCase(filter)">
				mapping.dnum = filter.dnum and filter.dnum=#{num}
			</if>
			<if test="filter != null and 'mechanic'.equalsIgnoreCase(filter)">
				mapping.mnum = filter.mnum and filter.mnum=#{num}
			</if>
			<if test="filter != null and 'publisher'.equalsIgnoreCase(filter)">
				mapping.pnum = filter.pnum and filter.pnum=#{num}
			</if>
			and mapping.gnum=g.gnum
		</where>

	</select>




	<select id="filteredList" resultType="gameDto">
	<bind name="filterColumn" value="filter+'.'+filter"/>
	<bind name="mappingTable" value="'game_'+filter"/>
		SELECT gnum, bggnum, GAMETITLE, GAMETITLE_ENG, TOTALVIEWCOUNT, RELEASE_YEAR, gamephoto_url, rank, rn, vcnt,
		nameStr, rate, weight
		FROM (
		SELECT a.gnum, a.bggnum, a.gametitle, a.gametitle_eng, a.totalviewcount, a.release_year,
		a.gamephoto_url, a.rank, a.vcnt, rownum rn, a.nameStr, a.rate, a.weight
		FROM (
		SELECT g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.totalviewcount, g.release_year,
		ga.fullname AS gamephoto_url, RANK() OVER (ORDER BY gv.vcnt DESC) AS rank, gv.vcnt,
		ROW_NUMBER() OVER (PARTITION BY g.gnum ORDER BY gv.vcnt DESC) AS game_rownum,
		b.${filter} as nameStr, gr.rate, gr.weight
		FROM game g
		LEFT JOIN (
		SELECT gnum, fullname
		FROM (
		SELECT ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
		gnum, fullname
		FROM game_attach
		)
		WHERE rnum = 1
		) ga
		ON g.gnum = ga.gnum
		LEFT JOIN (
		SELECT gnum, SUM(VIEWCOUNT) AS vcnt
		FROM VIEWCOUNT_DATE
		WHERE <![CDATA[
            LOG_DATE >= NEXT_DAY(sysdate - 15, '일')
            AND LOG_DATE < NEXT_DAY(sysdate - 8, '일')
        ]]>
		GROUP BY gnum, LOG_DATE
		HAVING SUM(VIEWCOUNT) IS NOT NULL
		ORDER BY vcnt DESC NULLS LAST
		) gv
		ON g.gnum = gv.gnum
		LEFT JOIN (
		SELECT gnum, avg(rating) as rate, avg(weight) as weight
		FROM game_rating
		GROUP BY gnum
		) gr
		ON g.gnum = gr.gnum

		left join (
		<if test="filter != null and 'artist'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.anum num
			from    ${mappingTable} m, ${filter} f
			where m.anum = f.anum
		</if>
		<if test="filter != null and 'gamecategory'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.cnum num
			from    game_category m, category f
			where m.cnum = f.cnum
		</if>
		<if test="filter != null and 'designer'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.dnum num
			from    ${mappingTable} m, ${filter} f
			where m.dnum = f.dnum
		</if>
		<if test="filter != null and 'mechanic'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.mnum num
			from    ${mappingTable} m, ${filter} f
			where m.mnum = f.mnum
		</if>
		<if test="filter != null and 'publisher'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.pnum num
			from    ${mappingTable} m, ${filter} f
			where m.pnum = f.pnum
		</if>
		) b
		on g.gnum = b.gnum
		WHERE g.del = 'n' and b.num=#{num}
		ORDER BY rank, gnum
		) a
		WHERE game_rownum = 1
		)
		WHERE rn BETWEEN #{start} AND #{end}

	</select>

	<select id="filteredList_rate" resultType="gameDto">
	<bind name="filterColumn" value="filter+'.'+filter"/>
	<bind name="mappingTable" value="'game_'+filter"/>
		SELECT gnum, bggnum, GAMETITLE, GAMETITLE_ENG, TOTALVIEWCOUNT, RELEASE_YEAR, gamephoto_url, rank, rn,
		nameStr, rate, weight
		FROM (
		SELECT a.gnum, a.bggnum, a.gametitle, a.gametitle_eng, a.totalviewcount, a.release_year,
		a.gamephoto_url, a.rank, rownum rn, a.nameStr, a.rate, a.weight
		FROM (
		SELECT g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.totalviewcount, g.release_year,
		ga.fullname AS gamephoto_url, RANK() OVER (ORDER BY gr.rate DESC nulls last) AS rank,
		b.${filter} as nameStr, gr.rate, gr.weight
		FROM game g
		LEFT JOIN (
		SELECT gnum, fullname
		FROM (
		SELECT ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
		gnum, fullname
		FROM game_attach
		)
		WHERE rnum = 1
		) ga
		ON g.gnum = ga.gnum
		LEFT JOIN (
		SELECT gnum, avg(rating) as rate, avg(weight) as weight
		FROM game_rating
		GROUP BY gnum
		) gr
		ON g.gnum = gr.gnum

		left join (
		<if test="filter != null and 'artist'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.anum num
			from    ${mappingTable} m, ${filter} f
			where m.anum = f.anum
		</if>
		<if test="filter != null and 'gamecategory'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.cnum num
			from    game_category m, category f
			where m.cnum = f.cnum
		</if>
		<if test="filter != null and 'designer'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.dnum num
			from    ${mappingTable} m, ${filter} f
			where m.dnum = f.dnum
		</if>
		<if test="filter != null and 'mechanic'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.mnum num
			from    ${mappingTable} m, ${filter} f
			where m.mnum = f.mnum
		</if>
		<if test="filter != null and 'publisher'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.pnum num
			from    ${mappingTable} m, ${filter} f
			where m.pnum = f.pnum
		</if>
		) b
		on g.gnum = b.gnum
		WHERE g.del = 'n' and b.num=#{num}
		ORDER BY rank, gnum
		) a
		)
		WHERE rn BETWEEN #{start} AND #{end}
	</select>

	<select id="filteredList_vcnt" resultType="gameDto">
	<bind name="filterColumn" value="filter+'.'+filter"/>
	<bind name="mappingTable" value="'game_'+filter"/>
		SELECT gnum, bggnum, GAMETITLE, GAMETITLE_ENG, TOTALVIEWCOUNT, RELEASE_YEAR, gamephoto_url, rank, rn,
		nameStr, rate, weight
		FROM (
		SELECT a.gnum, a.bggnum, a.gametitle, a.gametitle_eng, a.totalviewcount, a.release_year,
		a.gamephoto_url, a.rank, rownum rn, a.nameStr, a.rate, a.weight
		FROM (
		SELECT g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.totalviewcount, g.release_year,
		ga.fullname AS gamephoto_url, RANK() OVER (ORDER BY g.totalviewcount DESC) AS rank,
		b.${filter} as nameStr, gr.rate, gr.weight
		FROM game g
		LEFT JOIN (
		SELECT gnum, fullname
		FROM (
		SELECT ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
		gnum, fullname
		FROM game_attach
		)
		WHERE rnum = 1
		) ga
		ON g.gnum = ga.gnum
		LEFT JOIN (
		SELECT gnum, avg(rating) as rate, avg(weight) as weight
		FROM game_rating
		GROUP BY gnum
		) gr
		ON g.gnum = gr.gnum

		left join (
		<if test="filter != null and 'artist'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.anum num
			from    ${mappingTable} m, ${filter} f
			where m.anum = f.anum
		</if>
		<if test="filter != null and 'gamecategory'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.cnum num
			from    game_category m, category f
			where m.cnum = f.cnum
		</if>
		<if test="filter != null and 'designer'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.dnum num
			from    ${mappingTable} m, ${filter} f
			where m.dnum = f.dnum
		</if>
		<if test="filter != null and 'mechanic'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.mnum num
			from    ${mappingTable} m, ${filter} f
			where m.mnum = f.mnum
		</if>
		<if test="filter != null and 'publisher'.equalsIgnoreCase(filter)">
			select gnum, f.${filter}, f.pnum num
			from    ${mappingTable} m, ${filter} f
			where m.pnum = f.pnum
		</if>
		) b
		on g.gnum = b.gnum
		WHERE g.del = 'n' and b.num=#{num}
		ORDER BY rank, gnum
		) a
		)
		WHERE rn BETWEEN #{start} AND #{end}
	</select>


	<update id="gameupdate">
		update game

		set bggnum=#{bggnum}, gametitle=#{gametitle}, gametitle_eng=#{gametitle_eng}, players=#{players},
			playtime=#{playtime}, ages=#{ages}, language=#{language}, release_year=#{release_year},
			update_user=#{update_user}, update_date=sysdate

		where gnum=#{gnum}
	</update>

	<insert id="expansion_insert">
		insert into expansion (gnum, userid, exnum)
		values (seq_game.currval, #{userid},
			     (select gnum
			      from   game
			      where  gametitle=#{expansion})
			    )
	</insert>

	<insert id="reimplement_insert">
		insert into reimplement (gnum, userid, renum)
		values (seq_game.currval, #{userid},
					(select gnum
					 from   game
					 where  gametitle=#{reimplement})
				)
	</insert>

	<insert id="expansion_update">
		insert into expansion (gnum, userid, exnum)
		values (#{gnum}, #{userid},
			     (select gnum
			      from   game
			      where  gametitle=#{expansion})
			    )
	</insert>

	<insert id="reimplement_update">
		insert into reimplement (gnum, userid, renum)
		values (#{gnum}, #{userid},
					(select gnum
					 from   game
					 where  gametitle=#{reimplement})
				)
	</insert>


	<select id="getExReList" resultType="gameDto">
		<bind name="filternum" value="filter+'.'+filter+'num'"/>
		SELECT 	gnum, bggnum, gametitle, gametitle_eng, totalviewcount, release_year,
				gamephoto_url, rank, vcnt
		FROM 	(
				SELECT 	g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.totalviewcount, g.release_year,
						ga.fullname AS gamephoto_url, RANK() OVER (ORDER BY gv.vcnt DESC) AS rank, gv.vcnt,
						ROW_NUMBER() OVER (PARTITION BY g.gnum ORDER BY gv.vcnt DESC) AS game_rownum
				FROM 	game g
				LEFT JOIN 	(
							SELECT 	gnum, fullname
							FROM 	(
									SELECT 	ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
											gnum, fullname
									FROM game_attach
									)
							WHERE rnum = 1
							) ga
				ON 		g.gnum = ga.gnum
				LEFT JOIN 	(
							SELECT 	gnum, SUM(VIEWCOUNT) AS vcnt
							FROM 	VIEWCOUNT_DATE
							WHERE	<![CDATA[
            						LOG_DATE >= NEXT_DAY(sysdate - 15, '일')
            				AND 	LOG_DATE < NEXT_DAY(sysdate - 8, '일')
            						]]>
							GROUP BY gnum, LOG_DATE
							HAVING 	SUM(VIEWCOUNT) IS NOT NULL
							ORDER BY vcnt DESC NULLS LAST
							)	gv
				ON 		g.gnum = gv.gnum
				left join 	(
				<if test="filter != null and 'ex'.equalsIgnoreCase(filter)">
							select 	gnum, exnum
							from   	EXPANSION
							) ex
				</if>
				<if test="filter != null and 're'.equalsIgnoreCase(filter)">
							select 	gnum, renum
							from 	REIMPLEMENT
							) re
				</if>
				<if test="origin != null and 'child'.equalsIgnoreCase(origin)">
				on     	g.gnum = ${filternum}
				WHERE 	g.del = 'n' and ${filter}.GNUM= #{num}
				</if>
				<if test="origin != null and 'parent'.equalsIgnoreCase(origin)">
				on 		g.gnum = ${filter}.gnum
				WHERE 	g.del = 'n' and ${filternum}= #{num}
				</if>
				ORDER BY rank, gnum)
		WHERE game_rownum = 1
	</select>


	<update id="delete">
		update game
		set del = 'y', update_date = sysdate, update_user = #{userid}
		where gnum=#{gnum}
	</update>

	<select id="viewExpansion" resultType="String">
		select gametitle
		from (select gnum, gametitle
			  from   game
			  where  del='n'
			  ) g, expansion e
		where g.gnum = e.exnum and e.gnum = #{gnum}
	</select>

	<select id="viewReimplement" resultType="String">
		select gametitle
		from (select gnum, gametitle
			  from   game
			  where  del='n'
			  ) g, reimplement r
		where g.gnum = r.renum and r.gnum = #{gnum}
	</select>

	<select id="getExnum" resultType="int">
		select  nvl(max(g.gnum),0)
		from    expansion e,
        		(select gnum,GAMETITLE
         		 from   GAME
         		 where  del = 'n' and GAMETITLE = #{expansion}) g
		where   e.exnum = g.gnum and e.gnum = #{gnum}
	</select>

	<select id="getRenum" resultType="int">
		select  nvl(max(g.gnum),0)
		from    reimplement r,
        		(select gnum,GAMETITLE
         		 from   GAME
         		 where  del = 'n' and GAMETITLE = #{expansion}) g
		where   r.renum = g.gnum and r.gnum = #{gnum}
	</select>
	
</mapper>














