<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 다른 mapper와 중복되지 않도록 네임스페이스 기재 -->
<mapper namespace="game">

	<select id="gameListCount" resultType="int">
		select 	count(*)
		from 	game
		where 	del = 'n'
	</select>

	<select id="gameList" resultType="gameDto">
		SELECT 	gnum, bggnum, GAMETITLE, GAMETITLE_ENG, TOTALVIEWCOUNT, RELEASE_YEAR, gamephoto_url, game_rank,
				rate, weight, bgg_thumbnail, tot
		FROM 	(
				SELECT 	a.gnum, a.bggnum, a.gametitle, a.gametitle_eng, a.totalviewcount, a.release_year, a.bgg_thumbnail,
						a.game_rank, a.gamephoto_url, a.rate, a.weight,a.tot
				FROM 	(
						SELECT 	g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.totalviewcount, g.release_year,
								g.bgg_thumbnail, g.game_rank, ga.fullname AS gamephoto_url, gr.rate, gr.weight, gr.tot
						FROM 	game g
						LEFT JOIN 	(
									SELECT 	gnum, fullname
									FROM 	(
											SELECT 	ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
													gnum, fullname
											FROM 	game_attach
											)
									WHERE 	rnum = 1
									) ga
						ON 		g.gnum = ga.gnum
						LEFT JOIN 	(
									SELECT 	gnum, avg(rating) as rate, avg(weight) as weight, count(*) tot
									FROM 	game_rating
									GROUP BY 	gnum
									) gr
						ON 		g.gnum = gr.gnum
						WHERE 	g.del = 'n'
						ORDER BY 	game_rank
						) a
				)
		WHERE 	game_rank BETWEEN #{start} AND #{end}
	</select>

	<select id="gameList_vcnt" resultType="gameDto">
		SELECT 	gnum, bggnum, GAMETITLE, GAMETITLE_ENG, RELEASE_YEAR, gamephoto_url, game_rank, totalviewcount,
        		rate, weight, BGG_THUMBNAIL, tot
		FROM 	(
                SELECT 	g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.release_year,g.totalviewcount,
                		ga.fullname AS gamephoto_url, ROW_NUMBER() OVER (ORDER BY g.totalviewcount DESC) AS game_rank,
                		gr.rate, gr.weight, g.BGG_THUMBNAIL, gr.tot
                FROM 	game g
                LEFT JOIN 	(
                    		SELECT 	gnum, fullname
                    		FROM 	(
                            		SELECT 	ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
                                    		gnum, fullname
                            		FROM 	game_attach
                            		)
                    		WHERE 	rnum = 1
                    		) ga
                ON 		g.gnum = ga.gnum
                LEFT JOIN 	(
                    		SELECT 	gnum, avg(rating) as rate, avg(weight) as weight, count(*) tot
                    		FROM 	game_rating
                    		GROUP BY 	gnum
                    		) gr
                ON 		g.gnum = gr.gnum
                WHERE 	g.del = 'n'
                ORDER BY 	game_rank, gnum
        		)
		WHERE game_rank BETWEEN #{start} AND #{end}
	</select>

	<select id="gameList_rate" resultType="gameDto">
		SELECT 	gnum, bggnum, GAMETITLE, GAMETITLE_ENG, RELEASE_YEAR, gamephoto_url, game_rank, totalviewcount,
        		rate, weight, BGG_THUMBNAIL, tot
		FROM 	(
                SELECT 	g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.release_year,g.totalviewcount,
                		ga.fullname AS gamephoto_url, ROW_NUMBER() OVER (ORDER BY gr.rate DESC nulls last) AS game_rank,
                		gr.rate, gr.weight, g.BGG_THUMBNAIL, gr.tot
                FROM 	game g
                LEFT JOIN 	(
                    		SELECT 	gnum, fullname
                    		FROM 	(
                            		SELECT 	ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
                                    		gnum, fullname
                            		FROM 	game_attach
                            		)
                    		WHERE 	rnum = 1
                    		) ga
                ON 		g.gnum = ga.gnum
                LEFT JOIN 	(
                    		SELECT 	gnum, avg(rating) as rate, avg(weight) as weight, count(*) tot
                    		FROM 	game_rating
                    		GROUP BY 	gnum
                    		) gr
                ON 		g.gnum = gr.gnum
                WHERE 	g.del = 'n'
                ORDER BY 	game_rank, gnum
        		)
		WHERE game_rank BETWEEN #{start} AND #{end}
	</select>
	
	<insert id="gameInsert">
		insert into game
			(gnum, bggnum, gametitle, gametitle_eng, players, playtime,
			 ages, language, release_year, create_user)
		values
			(seq_game.nextval, #{bggnum}, #{gametitle}, #{gametitle_eng}, #{players},
			 #{playtime}, #{ages}, #{language}, #{release_year}, #{create_user})
	</insert>
	
	<update id="increaseViewcnt">
		update 	game
		set 	viewcount = viewcount+1, totalviewcount = totalviewcount+1
		where 	gnum=#{gnum}
	</update>
	
	<select id="view" resultType="gameDto">
    	select 	g.gnum, bggnum, gametitle, gametitle_eng, players, playtime, ages, language, bgg_thumbnail,
         	   	release_year, g.create_date, totalviewcount, ga.fullname gamephoto_url, game_rank
		from 	game g
		left join 	(
        	   		select 	gnum, fullname
              		from 	(
              				select row_number() over(partition by gnum order by create_date desc) rnum, gnum, fullname
                    		from game_attach
                    		)
             		where 	rnum = 1
             		) ga
        on 		g.gnum = ga.gnum
      	where 	g.gnum=#{gnum}
	</select>

	<select id="getAuto" resultType="gameDto">
		select 	GNUM, GAMETITLE_ENG, GAMETITLE, gamephoto_url, rn, BGG_THUMBNAIL
		from	(
				select 	g.gnum, g.gametitle, g.gametitle_eng, ga.fullname as gamephoto_url, rownum rn, g.BGG_THUMBNAIL
				from 	game g
				left join 	(
							select 	gnum, fullname
                			from 	(
                					select 	row_number() over(partition by gnum order by create_date desc) rnum,
                							gnum, fullname
                        			from 	game_attach
                       				) a
                			where rnum = 1
                			) ga
        		on 		g.GNUM = ga.GNUM
				where 	gametitle like '%'||#{input}||'%' and g.del = 'n'
				order by 	case when gametitle like '%'||#{input}||'%' then 1 else 2 end, gametitle
				) a
		WHERE rn BETWEEN 1 AND 5
	</select>

	<!--첨부파일 정보 저장-->
	<insert id="addAttach">
		insert into game_attach (fullname, gnum, create_user)
		values (#{fullName}, seq_game.currval, #{userid})
	</insert>

	<delete id="deleteFile">
		delete from game_attach where fullName=#{fileName}
	</delete>

	<select id="filteredListCount" resultType="int">
	<bind name="mappingTable" value="'game_'+filter"/>
		select count(*)
		<choose>
			<when test="filter != null and 'gamecategory'.equalsIgnoreCase(filter)">
				from game_category mapping, category filter
			</when>
			<otherwise>
				from ${mappingTable} mapping, ${filter} filter
			</otherwise>
		</choose>
		, (select gnum from game where del='n') g
		<where>
			<if test="filter != null and 'artist'.equalsIgnoreCase(filter)">
				mapping.anum = filter.anum and filter.anum=#{num}
			</if>
			<if test="filter != null and 'gamecategory'.equalsIgnoreCase(filter)">
				mapping.cnum = filter.cnum and filter.cnum=#{num}
			</if>
			<if test="filter != null and 'designer'.equalsIgnoreCase(filter)">
				mapping.dnum = filter.dnum and filter.dnum=#{num}
			</if>
			<if test="filter != null and 'mechanic'.equalsIgnoreCase(filter)">
				mapping.mnum = filter.mnum and filter.mnum=#{num}
			</if>
			<if test="filter != null and 'publisher'.equalsIgnoreCase(filter)">
				mapping.pnum = filter.pnum and filter.pnum=#{num}
			</if>
			and mapping.gnum=g.gnum
		</where>

	</select>




	<select id="filteredList" resultType="gameDto">
	<bind name="filterColumn" value="filter+'.'+filter"/>
	<bind name="mappingTable" value="'game_'+filter"/>
		SELECT 	gnum, bggnum, GAMETITLE, GAMETITLE_ENG, TOTALVIEWCOUNT, RELEASE_YEAR, gamephoto_url,bgg_thumbnail,
				nameStr, rate, weight, game_rank, rn, tot
		FROM 	(
				SELECT 	a.gnum, a.bggnum, a.gametitle, a.gametitle_eng, a.totalviewcount, a.release_year, a.bgg_thumbnail,
						a.gamephoto_url,  a.nameStr, a.rate, a.weight,a.game_rank, rownum rn, a.tot
				FROM 	(
						SELECT 	g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.totalviewcount, g.release_year,
								g.bgg_thumbnail,g.game_rank, ga.fullname AS gamephoto_url, b.${filter} as nameStr,
								gr.rate, gr.weight, gr.tot
						FROM 	game g
						LEFT JOIN 	(
									SELECT 	gnum, fullname
									FROM 	(
											SELECT 	ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
													gnum, fullname
											FROM 	game_attach
											)
									WHERE 	rnum = 1
									) ga
						ON 		g.gnum = ga.gnum
						LEFT JOIN 	(
									SELECT 	gnum, avg(rating) as rate, avg(weight) as weight, count(*) as tot
									FROM 	game_rating
									GROUP BY 	gnum
									) gr
						ON 		g.gnum = gr.gnum
						left join 	(
							<if test="filter != null and 'artist'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.anum num
									from    ${mappingTable} m, ${filter} f
									where 	m.anum = f.anum
							</if>
							<if test="filter != null and 'gamecategory'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.cnum num
									from    game_category m, category f
									where 	m.cnum = f.cnum
							</if>
							<if test="filter != null and 'designer'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.dnum num
									from    ${mappingTable} m, ${filter} f
									where 	m.dnum = f.dnum
							</if>
							<if test="filter != null and 'mechanic'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.mnum num
									from    ${mappingTable} m, ${filter} f
									where 	m.mnum = f.mnum
							</if>
							<if test="filter != null and 'publisher'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.pnum num
									from    ${mappingTable} m, ${filter} f
									where 	m.pnum = f.pnum
							</if>
									) b
						on 		g.gnum = b.gnum
						WHERE 	g.del = 'n' and b.num=#{num}
						ORDER BY game_rank
						) a
				)
		WHERE rn BETWEEN #{start} AND #{end}

	</select>

	<select id="filteredList_rate" resultType="gameDto">
	<bind name="filterColumn" value="filter+'.'+filter"/>
	<bind name="mappingTable" value="'game_'+filter"/>
		SELECT 	gnum, GAMETITLE, GAMETITLE_ENG, TOTALVIEWCOUNT, RELEASE_YEAR, gamephoto_url, game_rank, rn,
				nameStr, rate, weight, tot, BGG_THUMBNAIL
		FROM 	(
				SELECT 	a.gnum, a.gametitle, a.gametitle_eng, a.totalviewcount, a.release_year, a.GAME_RANK,
						a.gamephoto_url, rownum rn, a.nameStr, a.rate, a.weight, a.tot,a.BGG_THUMBNAIL
				FROM 	(
						SELECT 	g.gnum, g.gametitle, g.gametitle_eng, g.totalviewcount, g.release_year,
								ga.fullname AS gamephoto_url, RANK() OVER (ORDER BY gr.rate DESC nulls last) AS rscore,
								b.${filter} as nameStr, gr.rate, gr.weight, gr.tot, g.BGG_THUMBNAIL, g.GAME_RANK
						FROM 	game g
						LEFT JOIN 	(
									SELECT 	gnum, fullname
									FROM 	(
											SELECT 	ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
													gnum, fullname
											FROM game_attach
											)
									WHERE 	rnum = 1
									) ga
						ON 		g.gnum = ga.gnum
						LEFT JOIN 	(
									SELECT 	gnum, avg(rating) as rate, avg(weight) as weight, count(*) as tot
									FROM 	game_rating
									GROUP BY 	gnum
									) gr
						ON 		g.gnum = gr.gnum
						left join 	(
							<if test="filter != null and 'artist'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.anum num
									from    ${mappingTable} m, ${filter} f
									where 	m.anum = f.anum
							</if>
							<if test="filter != null and 'gamecategory'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.cnum num
									from    game_category m, category f
									where 	m.cnum = f.cnum
							</if>
							<if test="filter != null and 'designer'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.dnum num
									from    ${mappingTable} m, ${filter} f
									where 	m.dnum = f.dnum
							</if>
							<if test="filter != null and 'mechanic'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.mnum num
									from    ${mappingTable} m, ${filter} f
									where 	m.mnum = f.mnum
							</if>
							<if test="filter != null and 'publisher'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.pnum num
									from    ${mappingTable} m, ${filter} f
									where 	m.pnum = f.pnum
							</if>
									) b
						on 		g.gnum = b.gnum
						WHERE 	g.del = 'n' and b.num=#{num}
						ORDER BY rscore, game_rank
						) a
				)
		WHERE rn BETWEEN #{start} AND #{end}
	</select>

	<select id="filteredList_vcnt" resultType="gameDto">
	<bind name="filterColumn" value="filter+'.'+filter"/>
	<bind name="mappingTable" value="'game_'+filter"/>
		SELECT 	gnum, GAMETITLE, GAMETITLE_ENG, TOTALVIEWCOUNT, RELEASE_YEAR, gamephoto_url, game_rank, rn,
				nameStr, rate, weight, tot, BGG_THUMBNAIL
		FROM 	(
				SELECT 	a.gnum, a.gametitle, a.gametitle_eng, a.totalviewcount, a.release_year, a.GAME_RANK,
						a.gamephoto_url, rownum rn, a.nameStr, a.rate, a.weight, a.tot,a.BGG_THUMBNAIL
				FROM 	(
						SELECT 	g.gnum, g.gametitle, g.gametitle_eng, g.totalviewcount, g.release_year,
								ga.fullname AS gamephoto_url, RANK() OVER (ORDER BY g.totalviewcount DESC) AS rscore,
								b.${filter} as nameStr, gr.rate, gr.weight, gr.tot, g.BGG_THUMBNAIL, g.GAME_RANK
						FROM 	game g
						LEFT JOIN 	(
									SELECT 	gnum, fullname
									FROM 	(
											SELECT 	ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
													gnum, fullname
											FROM game_attach
											)
									WHERE 	rnum = 1
									) ga
						ON 		g.gnum = ga.gnum
						LEFT JOIN 	(
									SELECT 	gnum, avg(rating) as rate, avg(weight) as weight, count(*) as tot
									FROM 	game_rating
									GROUP BY 	gnum
									) gr
						ON 		g.gnum = gr.gnum
						left join 	(
							<if test="filter != null and 'artist'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.anum num
									from    ${mappingTable} m, ${filter} f
									where 	m.anum = f.anum
							</if>
							<if test="filter != null and 'gamecategory'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.cnum num
									from    game_category m, category f
									where 	m.cnum = f.cnum
							</if>
							<if test="filter != null and 'designer'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.dnum num
									from    ${mappingTable} m, ${filter} f
									where 	m.dnum = f.dnum
							</if>
							<if test="filter != null and 'mechanic'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.mnum num
									from    ${mappingTable} m, ${filter} f
									where 	m.mnum = f.mnum
							</if>
							<if test="filter != null and 'publisher'.equalsIgnoreCase(filter)">
									select 	gnum, f.${filter}, f.pnum num
									from    ${mappingTable} m, ${filter} f
									where 	m.pnum = f.pnum
							</if>
									) b
						on 		g.gnum = b.gnum
						WHERE 	g.del = 'n' and b.num=#{num}
						ORDER BY rscore, game_rank
						) a
				)
		WHERE rn BETWEEN #{start} AND #{end}
	</select>


	<update id="gameupdate">
		update 	game
		set 	bggnum=#{bggnum},
				gametitle=#{gametitle},
				gametitle_eng=#{gametitle_eng},
				players=#{players},
				playtime=#{playtime},
				ages=#{ages},
				language=#{language},
				release_year=#{release_year},
				update_user=#{update_user},
				update_date=sysdate
		where gnum=#{gnum}
	</update>

	<insert id="expansion_insert">
		insert into expansion (gnum, userid, exnum)
		values (seq_game.currval, #{userid},
			     (select gnum
			      from   game
			      where  gametitle=#{expansion})
			    )
	</insert>

	<insert id="reimplement_insert">
		insert into reimplement (gnum, userid, renum)
		values (seq_game.currval, #{userid},
					(select gnum
					 from   game
					 where  gametitle=#{reimplement})
				)
	</insert>

	<insert id="expansion_update">
		insert into expansion (gnum, userid, exnum)
		values (#{gnum}, #{userid},
			     (select gnum
			      from   game
			      where  gametitle=#{expansion})
			    )
	</insert>

	<insert id="reimplement_update">
		insert into reimplement (gnum, userid, renum)
		values (#{gnum}, #{userid},
					(select gnum
					 from   game
					 where  gametitle=#{reimplement})
				)
	</insert>


	<select id="getExReList" resultType="gameDto">
	<bind name="filternum" value="filter+'.'+filter+'num'"/>
		SELECT 	gnum, bggnum, gametitle, gametitle_eng, totalviewcount, release_year,
				gamephoto_url,BGG_THUMBNAIL, GAME_RANK, rate, weight, tot
		FROM 	(
				SELECT 	g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.totalviewcount, g.release_year,
						ga.fullname AS gamephoto_url, g.BGG_THUMBNAIL, g.GAME_RANK, gr.weight, gr.rate, gr.tot
				FROM 	game g
				LEFT JOIN 	(
							SELECT 	gnum, fullname
							FROM 	(
									SELECT 	ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
											gnum, fullname
									FROM game_attach
									)
							WHERE rnum = 1
							) ga
				ON 		g.gnum = ga.gnum
				LEFT JOIN 	(
							SELECT 	gnum, avg(rating) as rate, avg(weight) as weight, count(*) as tot
							FROM 	game_rating
							GROUP BY 	gnum
							) gr
				ON 		g.gnum = gr.gnum
				left join 	(
				<if test="filter != null and 'ex'.equalsIgnoreCase(filter)">
							select 	gnum, exnum
							from   	EXPANSION
							) ex
				</if>
				<if test="filter != null and 're'.equalsIgnoreCase(filter)">
							select 	gnum, renum
							from 	REIMPLEMENT
							) re
				</if>
				<if test="origin != null and 'child'.equalsIgnoreCase(origin)">
				on     	g.gnum = ${filternum}
				WHERE 	g.del = 'n' and ${filter}.GNUM= #{num}
				</if>
				<if test="origin != null and 'parent'.equalsIgnoreCase(origin)">
				on 		g.gnum = ${filter}.gnum
				WHERE 	g.del = 'n' and ${filternum}= #{num}
				</if>
				ORDER BY game_rank
				)
	</select>


	<update id="delete">
		update game
		set del = 'y', update_date = sysdate, update_user = #{userid}
		where gnum=#{gnum}
	</update>

	<select id="viewExpansion" resultType="String">
		select gametitle
		from (select gnum, gametitle
			  from   game
			  where  del='n'
			  ) g, expansion e
		where g.gnum = e.exnum and e.gnum = #{gnum}
	</select>

	<select id="viewReimplement" resultType="String">
		select gametitle
		from (select gnum, gametitle
			  from   game
			  where  del='n'
			  ) g, reimplement r
		where g.gnum = r.renum and r.gnum = #{gnum}
	</select>

	<select id="getExnum" resultType="int">
		select  nvl(max(g.gnum),0)
		from    expansion e,
        		(select gnum,GAMETITLE
         		 from   GAME
         		 where  del = 'n' and GAMETITLE = #{expansion}) g
		where   e.exnum = g.gnum and e.gnum = #{gnum}
	</select>

	<select id="getRenum" resultType="int">
		select  nvl(max(g.gnum),0)
		from    reimplement r,
        		(select gnum,GAMETITLE
         		 from   GAME
         		 where  del = 'n' and GAMETITLE = #{expansion}) g
		where   r.renum = g.gnum and r.gnum = #{gnum}
	</select>

	<select id="weeklyList" resultType="gameDto">
		select GNUM,GAMETITLE,GAMETITLE_ENG,BGG_THUMBNAIL,RELEASE_YEAR, game_rank
		from game
		where game_rank between 1 and 10
		order by game_rank
	</select>

	<select id="newbieList" resultType="gameDto">
		SELECT 	*
		FROM 	(
  				SELECT 	GAME.*,
    					ROW_NUMBER() OVER (ORDER BY GAME.create_date DESC) AS game_rank
  				FROM 	(
    					SELECT 	GAMETITLE, GNUM, GAMETITLE_ENG, BGG_THUMBNAIL,RELEASE_YEAR,CREATE_DATE
    					FROM 	GAME
  						) GAME
				) RANKED_GAMES
		WHERE game_rank BETWEEN 1 AND 10
	</select>

	<update id="upimg">
		update 	GAME
		set 	BGG_THUMBNAIL = #{uimg}
		where	BGGNUM = #{bggnum}
	</update>

	<select id="gameList_newbie" resultType="gameDto">
		SELECT 	gnum, bggnum, GAMETITLE, GAMETITLE_ENG, TOTALVIEWCOUNT, RELEASE_YEAR, gamephoto_url, game_rank,
				rate, weight, bgg_thumbnail, tot
		FROM 	(
				SELECT 	a.gnum, a.bggnum, a.gametitle, a.gametitle_eng, a.totalviewcount, a.release_year,
						a.bgg_thumbnail, a.game_rank, a.gamephoto_url, a.rate, a.weight, a.tot
				FROM 	(
						SELECT 	g.gnum, g.bggnum, g.gametitle, g.gametitle_eng, g.totalviewcount, g.release_year, g.bgg_thumbnail,
        						ROW_NUMBER() OVER (ORDER BY g.create_date DESC) AS game_rank,
								ga.fullname AS gamephoto_url, gr.rate, gr.weight, gr.tot
						FROM game g
						LEFT JOIN (
									SELECT gnum, fullname
									FROM (
										SELECT 	ROW_NUMBER() OVER (PARTITION BY gnum ORDER BY create_date DESC) rnum,
												gnum, fullname
										FROM 	game_attach
										)
									WHERE rnum = 1
									) ga
						ON g.gnum = ga.gnum
						LEFT JOIN (
									SELECT 	gnum, avg(rating) as rate, avg(weight) as weight, count(*) tot
									FROM 	game_rating
									GROUP BY gnum
									) gr
						ON g.gnum = gr.gnum
						WHERE g.del = 'n'
						ORDER BY game_rank
						) a

				)
		WHERE game_rank BETWEEN #{start} AND #{end}
	</select>


</mapper>














