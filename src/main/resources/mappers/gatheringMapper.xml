<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 다른 mapper와 중복되지 않도록 네임스페이스 기재 -->
<mapper namespace="gathering">

	<insert id="addPost">
		<selectKey keyProperty="gathering_id" resultType="int" order="BEFORE">
			select gathering_id_seq.nextval from dual
		</selectKey>
		insert into gathering
			(gathering_id, writer_id, post_date, title, gathering_content, gathering_date,
			maxpeople, attendsystem, note, question, address1, address2, address3, place_name, lat, lng)
		values 
			(#{gathering_id},#{writer_id},sysdate,#{title},#{gathering_content},#{gathering_date},
			 #{maxPeople},#{attendSystem},#{note},#{question}, #{address1}, #{address2}, #{address3},
			 #{place_name}, #{lat}, #{lng})
	</insert>

	<update id="deletePost">
		update gathering
		set show = 'n'
		where gathering_id = #{gathering_id}
	</update>

	<select id="countList" resultType="int">
		select count(*)
		from gathering
		where
		show = 'y'
		<if test="address1List!=null and address1List.length!=0">
			and (
			<trim suffixOverrides="or">
				<foreach item="address1" collection="address1List">
					<choose>
						<when test="address1=='전체'">
							1=1 or
						</when>
						<otherwise>
							address1 like #{address1}||'%' or
						</otherwise>
					</choose>
				</foreach>
			</trim>
			)
		</if>

		<if test="showAvailable==true">
			and (sysdate + 1/48 ) <![CDATA[<]]> gathering_date
		</if>

		<if test="from!=null">
			and trunc(gathering_date, 'DD') <![CDATA[>]]>= #{from}
		</if>

		<if test="to!=null">
			and trunc(gathering_date, 'DD') <![CDATA[<]]>= #{to}
		</if>

		<if test="keyword!=null and !keyword.equals('')">
			<choose>
				<when test="option.equals('title')">
					and Lower(title) like lower('%'||#{keyword}||'%')
				</when>
				<when test="option.equals('gathering_content')">
					and Lower(gathering_content) like lower('%'||#{keyword}||'%')
				</when>
				<when test="option.equals('location')">
					and address1||address2||address3||place_name like lower('%'||#{keyword}||'%')
				</when>
				<when test="option.equals('writer')">
					and (writer_id like lower('%'||#{keyword}||'%') or
					nickname like lower('%'||#{keyword}||'%')
					)
				</when>
				<otherwise>
					and (Lower(title) like lower('%'||#{keyword}||'%')
					or Lower(gathering_content) like lower('%'||#{keyword}||'%'))
				</otherwise>
			</choose>
		</if>
		</select>


	<select id="checkIfAttendee" resultType="com.example.boardinfo.model.gathering.dto.AttendeeType">
		select type from attendee
		where attendee_id =
			  (select max(attendee_id) from attendee
			   where gathering_id = #{gathering_id} and user_id = #{user_id})
	</select>

	
	<select id="list" resultType="gatheringDTO">
		select *
		from
		(
		select a.*, rownum rn
		from
		(select gathering_id, writer_id, post_date, title, gathering_date,
		address1, address2, place_name, maxpeople, view_count, nickname,
		(select count(*)
		from gathering_reply
		where gathering_id = g.gathering_id and show='y') as reply_count,
		(select count(*)
		from attendee
		where gathering_id = g.gathering_id and type = 'a') as attendee_count
		from gathering g
		join member m on g.writer_id = m.userid
	    where
	        show = 'y'
	        <if test="address1List!=null and address1List.length!=0">
				and (
				    <trim suffixOverrides="or">
					<foreach item="address1" collection="address1List">
						<choose>
							<when test="address1=='전체'">
				    			1=1 or
							</when>
							<otherwise>
								address1 like #{address1}||'%' or
							</otherwise>
						</choose>
					</foreach>
				</trim>
				)
			</if>

	<if test="showAvailable==true">
	and (sysdate + 1/48 ) <![CDATA[<]]> gathering_date
	</if>

	<if test="from!=null">
	and trunc(gathering_date, 'DD') <![CDATA[>]]>= #{from}
	</if>

	<if test="to!=null">
	and trunc(gathering_date, 'DD') <![CDATA[<]]>= #{to}
	</if>

		<if test="keyword!=null and !keyword.equals('')">
			<choose>
				<when test="option.equals('title')">
					and Lower(title) like lower('%'||#{keyword}||'%')
				</when>
				<when test="option.equals('gathering_content')">
					and Lower(gathering_content) like lower('%'||#{keyword}||'%')
				</when>
				<when test="option.equals('location')">
					and address1||address2||address3||place_name like lower('%'||#{keyword}||'%')
				</when>
				<when test="option.equals('writer')">
					and (writer_id like lower('%'||#{keyword}||'%') or
					nickname like lower('%'||#{keyword}||'%')
					)
				</when>
				<otherwise>
					and (Lower(title) like lower('%'||#{keyword}||'%')
					or Lower(gathering_content) like lower('%'||#{keyword}||'%'))
				</otherwise>
			</choose>
		</if>
		order by gathering_id desc
	)a
	)
	where rn between #{start} and #{end}

	</select>

	<select id="view" resultType="gatheringDTO">
	select g.*, m.nickname,
	(select count(*)
	from attendee
	where gathering_id = #{gathering_id} and type = 'a') as attendee_count
	from gathering g
	join member m on g.writer_id = m.userid
	where gathering_id = #{gathering_id} and show = 'y'
	</select>
	
	<update id="viewCount">
	update gathering
	set view_count = view_count+1
	where gathering_id = #{gathering_id} and show = 'y'
	</update>

	<insert id="attend">
		insert into attendee
			(attendee_id, gathering_id, user_id, type, answer, create_date)
		values(attendee_id_seq.nextval, #{gathering_id}, #{user_id}, #{type}, #{answer}, sysdate)
	</insert>


	<select id="getTargetReplyOrder" resultType="int">
		select nvl(
		(select min(inner_order) from gathering_reply
		where parent_reply = #{parent_reply} and depth <![CDATA[<]]>= #{depth}
		and inner_order <![CDATA[>]]> #{inner_order}
		)
		,
		(
		select max(inner_order)+1
		from gathering_reply
		where parent_reply = #{parent_reply}
		)
		)
   	from dual
	</select>

	<select id="getReply" resultType="gatheringReplyDTO">
		select reply_id, parent_reply, depth, inner_order
		from gathering_reply
		where reply_id = #{mother_reply}
	</select>

	<select id="getLast" resultType="int">
		select count(*)
		from gathering_reply
		where gathering_id = #{gathering_id}
	</select>

	<update id="replyOrderUpdate">
		update gathering_reply
		set inner_order = inner_order + 1
		where parent_reply = #{parent_reply} and inner_order >= (#{inner_order})
	</update>

	<insert id="addReply" parameterType="gatheringReplyDTO">
		insert into gathering_reply
		(reply_id, gathering_id, parent_reply, inner_order, depth, reply_text, creator_id)
		values
			(nvl((select max(reply_id) from gathering_reply)+1,1), #{gathering_id},
			 <choose>
				<when test="parent_reply == null">
					nvl((select max(reply_id) from gathering_reply)+1,1)
				</when>
				<otherwise>
					#{parent_reply}
				</otherwise>
			 </choose>
			 , #{inner_order}, #{depth}, #{reply_text}, #{creator_id})
	</insert>

	<select id="getReplies" resultType="gatheringReplyDTO">
		select reply_id, parent_reply, inner_order, depth, reply_text, show,
		       creator_id, create_date as create_date, m.nickname
		from gathering_reply
		join member m on creator_id = m.userid
		where gathering_id = #{gathering_id}
		order by parent_reply, inner_order
	</select>


	<update id="update">
		update gathering
		set update_date = sysdate, title = #{title}, gathering_date = #{gathering_date},
		address1 = #{address1}, address2 = #{address2}, address3 = #{address3},
		place_name = #{place_name}, maxpeople = #{maxPeople},
		attendsystem = #{attendSystem}, note = #{note}, gathering_content = #{gathering_content},
		lat = #{lat}, lng=#{lng},
		<choose>
			<when test="attendSystem.equals('p')">
				question = #{question}
			</when>
			<otherwise>
				question = ''
			</otherwise>
		</choose>
		where gathering_id = #{gathering_id}
	</update>


	<select id="getAttendInfo" resultType="gatheringDTO">
		select maxPeople,
			   (select count(*)
				from attendee
				where gathering_id = #{gathering_id} and type = 'a'
			   ) as attendeeCount,
			   attendSystem, show
		from gathering
		where gathering_id = #{gathering_id}
	</select>


	<update id="withdraw">
		update attendee
		set type = 'l'
		where attendee_id =
			  (select max(attendee_id) from attendee
			   where gathering_id = #{gathering_id} and user_id = #{user_id})
	</update>


	<select id="getWriterAndShow" resultType="hashMap">
		select writer_id, show from gathering
		where gathering_id = #{gathering_id}
	</select>


	<delete id="cancelApplication">
		delete from attendee
		where gathering_id = #{gathering_id} and user_id = #{user_id} and type = 'w'
	</delete>


	<select id="getIdAndNicknames" resultType="hashMap">
		select user_id, nickname
		from
			(
				select user_id
				from attendee
				where gathering_id = #{gathering_id}
				group by user_id
			) a
				join member m on m.userid = a.user_id

	</select>


	<select id="countActiveGathering" resultType="int">
		select count(*)
		from attendee a
				 join gathering g on a.gathering_id = g.gathering_id
		where a.user_id = #{user_id} and (type = 'a' or type = 'w') and g.gathering_date > sysdate
	</select>


	<update id="finishChat">
		update gathering
		set finishChat = 'y'
		where gathering_date + 3 <![CDATA[<]]>= sysdate and finishchat = 'n'
	</update>


	<select id="finishList" resultType="Integer">
		select gathering_id
		from gathering
		where gathering_date + 3 <![CDATA[<]]>= sysdate and finishchat = 'n'
	</select>

	<select id="gaListByUserid" resultType="gatheringDTO">
		select gathering_id,
			   m.userid,
			   post_date as create_date,
			   title,
			   gathering_date,
			   address1,
			   address2,
			   place_name,
			   maxpeople,
			   view_count,
			   nickname,
			   (select count(*)
				from attendee
				where gathering_id = g.gathering_id
				  and type = 'a') as attendee_count,
			   (select count(*)from GATHERING_REPLY where GATHERING_ID =g.GATHERING_ID) re_count

		from gathering g
				 join member m on g.writer_id = m.userid
		where show = 'y'
		  and userid = #{userid}
		order by gathering_id
				desc
	</select>


	<select id="getHomeList" resultType="gatheringDTO">
		select *
		from
			(
				select a.*, row_number() over(order by post_date desc) rn
				from
					(
						select g.gathering_id, g.post_date, g.title, g.address1,
							   (select count(*)
								from gathering_reply
								where gathering_id = g.gathering_id and show = 'y') as reply_count
						from gathering g
						where show = 'y'
					)a
			)
		where rn between 1 and #{size}
	</select>


	<select id="getReplyWriter" resultType="String">
		select creator_id
		from gathering_reply
		where reply_id = #{reply_id}
	</select>


	<update id="updateReply">
		update gathering_reply
		set reply_text = #{reply_text}, updater_id = #{updater_id}, update_date = sysdate
		where reply_id = #{reply_id}
	</update>


	<update id="deleteReply">
		update gathering_reply
		set show = 'n', updater_id = #{updater_id}, update_date = sysdate
		where reply_id = #{reply_id}
	</update>


</mapper>














