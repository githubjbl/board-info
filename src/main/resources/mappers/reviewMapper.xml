<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 다른 mapper와 중복되지 않도록 네임 스페이스 기재 -->

<mapper namespace="review">

	<!--페이징시작-->
	<sql id="pagingStart">
		SELECT * FROM (
	</sql>

	<!--페이징종료-->
	<sql id="pagingEnd">
		)
	</sql>

	<!--페이징-->
	<sql id="paging">
		WHERE RNUM BETWEEN #{start} AND #{end}
	</sql>

	<!-- 리뷰 목록 조회 -->
	<select id="reviewList" parameterType="hashMap" resultType="com.example.boardinfo.model.review.dto.ReviewDTO">

		/* review.reviewList */
		<include refid = "pagingStart"/>
			SELECT A.*, ROWNUM AS RNUM
			  FROM (
					SELECT R.REG_NUM AS REGNUM
						 , M.USERID
						 , M.NICKNAME
						 , R.CATEGORY
						 , R.VIEWS
						 , R.TITLE
						 , R.REVIEW_DETAIL AS REVIEWDETAIL
						 , (SELECT MAX(B.GAMETITLE) || CASE (COUNT(1)-1) WHEN 0 THEN '' ELSE ' 외 ' || (COUNT(1)-1)END FROM CHOICE_GAME A, GAME B WHERE A.DEL = 'N' AND B.DEL = 'n' AND A.GNUM = B.GNUM AND A.REVIEWREGNUM = R.REG_NUM GROUP BY A.REVIEWREGNUM) AS GAMETITLE /*게임 타이틀 보여주기*/
						 , (SELECT COUNT(1) FROM REVIEWGOOD WHERE REVIEWPK = R.REG_NUM AND GOOD = 'Y' AND DEL = 'N') AS GOOD /*좋아요 개수*/
						 , (SELECT COUNT(1) FROM REPLY_COMMENTS WHERE DEL = 'N' AND REG_NUM = R.REG_NUM) AS RECNT /*댓글 개수*/
						 , R.DEL
						 , R.CREATE_USER AS CREATEUSER
						 , TO_CHAR(R.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDATE
						 , R.UPDATE_USER AS UPDATEUSER
						 , TO_CHAR(R.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATEDATE
					  FROM REVIEW R
                         , MEMBER M
					 WHERE R.CREATE_USER = M.USERID(+)
					   AND R.DEL = 'N'
					<!--검색-->
					<if test="searchTitle != '' and searchTitle != null">
					   AND (R.TITLE LIKE '%'||#{searchTitle}||'%'
					    OR R.REVIEW_DETAIL LIKE '%'||#{searchTitle}||'%')
					</if>
					<!--디테일 진입-->
    				<if test="reviewDetailKey != '' and reviewDetailKey != null">
        			   AND R.REG_NUM = #{reviewDetailKey}
					</if>
					<!--카테고리 정렬-->
    				<if test="boardDivision != '' and boardDivision != null">
        			   AND R.CATEGORY in (${boardDivision})
    				</if>
					<!--위의 if문에 해당안되는 인기글 분기-->
					/*--현재 편의상 조회수 2개이상, 댓글 1개이상, 좋아요 1개이상으로 구성*/
					<if test='freeFlag != null and "H".equals(freeFlag)'>
					   AND
							r.views > 2 and
							(SELECT COUNT(1) FROM REPLY_COMMENTS WHERE DEL = 'N' AND REG_NUM = R.REG_NUM) > 1 and
							(SELECT COUNT(1) FROM REVIEWGOOD WHERE REVIEWPK = R.REG_NUM AND GOOD = 'Y' AND DEL = 'N') > 1
					</if>
				     ORDER BY CREATEDATE DESC
			      ) A
    	<include refid = "pagingEnd"/>
    	<if test="reviewDetailKey == '' or reviewDetailKey == null">
        	<include refid = "paging"/>
    	</if>

</select>

<!-- 리뷰 목록 조회 카운트 -->
	<select id="reviewListCnt" parameterType="hashMap" resultType="int">
		SELECT count(1)
		FROM REVIEW R
		   , MEMBER M
		WHERE R.CREATE_USER = M.USERID(+)
		  AND R.DEL = 'N'
		/*검색*/
		<if test="searchTitle != '' and searchTitle != null">
			AND (R.TITLE LIKE '%'||#{searchTitle}||'%'
			 OR R.REVIEW_DETAIL LIKE '%'||#{searchTitle}||'%')
		</if>
		/*디테일 진입*/
		<if test="reviewDetailKey != '' and reviewDetailKey != null">
			AND R.REG_NUM = #{reviewDetailKey}
		</if>
		/*카테고리 정렬*/
		<if test="boardDivision != '' and boardDivision != null">
			AND R.CATEGORY in (${boardDivision})
		</if>
		/*--현재 편의상 조회수 2개이상, 댓글 1개이상, 좋아요 1개이상으로 구성*/
		<if test="freeFlag != null and 'H'.equals(freeFlag)">
			AND
			r.views > 2 and
			(SELECT COUNT(1) FROM REPLY_COMMENTS WHERE DEL = 'N' AND REG_NUM = R.REG_NUM) > 1 and
			(SELECT COUNT(1) FROM REVIEWGOOD WHERE REVIEWPK = R.REG_NUM AND GOOD = 'Y' AND DEL = 'N') > 1
		</if>

	</select>


	<!--선택된 게임 목록 조회-->
	<select id="reviewChoiceGameList" parameterType="hashMap" resultType="com.example.boardinfo.model.review.dto.ChoiceGameDTO">
		SELECT R.REG_NUM
			 , CG.REVIEWREGNUM
			 , R.CATEGORY
			 , CG.CHOICE_REG_NUM
			 , CG.GNUM
			 , G.GAMETITLE
			 , G.GAMETITLE_ENG
			 , G.PLAYERS
			 , G.PLAYTIME
			 , G.AGES
			 , G.LANGUAGE
			 , RELEASE_YEAR
		FROM REVIEW R
		   , CHOICE_GAME CG
		   , GAME G
		WHERE CG.DEL = 'N'
		  AND R.REG_NUM = CG.REVIEWREGNUM
		  AND CG.GNUM = G.GNUM(+)
		  AND cg.REVIEWREGNUM = #{reviewDetailKey}
	</select>


	<!-- 리뷰 입력 -->
	<insert id="reviewInsertPage" parameterType="com.example.boardinfo.model.review.dto.ReviewDTO" >
		<selectKey keyProperty="regNum" resultType="String" order="BEFORE">
			select  to_char(sysdate, 'yymmdd') || LPAD(NVL((select MAX(SUBSTR(REG_NUM, 7)) + 1 from review where REG_NUM LIKE to_char(sysdate, 'yymmdd') || '%'), '1'),5, 0) from dual
		</selectKey>
		INSERT INTO REVIEW (
				REG_NUM
				, CATEGORY
				, TITLE
				, REVIEW_DETAIL
				, CREATE_USER
		)
		VALUES(
				#{regNum}
				,#{category}
				,#{title}
				,#{reviewDetail}
				,#{createUser}
		)
	</insert>


	<!-- 선택된 게임 입력 -->
	<insert id="reviewGameInsert" parameterType="hashMap">

		INSERT INTO CHOICE_GAME (
								  CHOICE_REG_NUM
								, GNUM
								, REVIEWREGNUM
								, DEL
								, CREATE_USER
		)
		VALUES (
				 to_char(sysdate, 'yymmdd') || LPAD(NVL((select MAX(SUBSTR(CHOICE_REG_NUM, 7)) + 1 from CHOICE_GAME where CHOICE_REG_NUM LIKE to_char(sysdate, 'yymmdd') || '%'), '1'),5, 0)
			   , #{gameGnum}
			   , #{regNum}
			   , 'N'
			   , #{createUser}
			   )

	</insert>


	<!-- 리뷰 수정 -->
	<update id="reviewedit" parameterType="hashMap">
		UPDATE REVIEW
			SET   CATEGORY = #{category}
			  	, TITLE = #{title}
			  	, REVIEW_DETAIL = #{reviewDetail}
			  	, UPDATE_USER = #{createUser}
			  	, UPDATE_DATE = sysdate
		WHERE 1 = 1
		  AND REG_NUM = #{regNum}
	</update>

	<!-- 게임 목록 전체 삭제 -->
	<update id="reviewGameDel" parameterType="hashMap">
		UPDATE CHOICE_GAME
			SET   DEL='Y'
				, UPDATE_USER = #{createUser}
				, UPDATE_DATE = sysdate
		WHERE REVIEWREGNUM = #{regNum}
	</update>

	<!-- 리뷰 삭제 -->
	<update id="revieweDel" parameterType="hashMap">
		UPDATE REVIEW
			SET   DEL = 'Y'
		  		, UPDATE_USER = #{createUser}
		  		, UPDATE_DATE = sysdate
		WHERE 1 = 1
		  AND REG_NUM = #{reviewDetailKey}
	</update>

	<!-- 신고하기 입력 -->
	<insert id="waringReport" parameterType="hashMap">
		MERGE INTO WARNING_REPORT
			  USING dual
			  ON (WARNING_NO = #{reviewDetailKey}||#{createUser})
		WHEN MATCHED THEN
			 UPDATE
			 	SET TABLE_WRITING_PK = #{reviewDetailKey}
			 	 	,WARING = DECODE(WARING,'Y','N','Y')
			 	 	,UPDATE_USER = #{createUser} /*지금 로그인 한 사람 정보가 필요*/
			 	 	,CREATE_DATE = sysdate
		WHEN NOT MATCHED THEN
			INSERT (WARNING_NO, TABLE_WRITING_PK, WARING, CREATE_USER, CREATE_DATE)
			VALUES (#{reviewDetailKey}||#{createUser} , #{reviewDetailKey} ,'Y', #{createUser} , sysdate)
	</insert>

	<!-- 좋아요 입력 -->
	<insert id="reviewGood" parameterType="hashMap">
		MERGE INTO REVIEWGOOD
			  USING dual
			  ON (GOODKEY = #{reviewDetailKey}||#{createUser})
		WHEN MATCHED THEN
			 UPDATE
			 	SET REVIEWPK = #{reviewDetailKey}
			 	 	,GOOD = DECODE(GOOD,'Y','N','Y')
			 	 	,UPDATE_USER = #{createUser} /*지금 로그인 한 사람 정보가 필요*/
			 	 	,CREATE_DATE = sysdate
		WHEN NOT MATCHED THEN
			INSERT (GOODKEY, REVIEWPK, GOOD, CREATE_USER, CREATE_DATE)
			VALUES (#{reviewDetailKey}||#{createUser} , #{reviewDetailKey} ,'Y', #{createUser} , sysdate)
	</insert>

	<!-- 리뷰 조회수 증가 -->
	<update id="reviewViews" parameterType="hashMap">
		UPDATE REVIEW
			SET VIEWS = VIEWS+1
		WHERE 1 = 1
		  AND REG_NUM = #{reviewDetailKey,jdbcType=VARCHAR} /*null 값 허용 : jdbcType=VARCHAR*/
	</update>


	<!--리뷰 댓글 입력-->
	<insert id="reviewReply" parameterType="hashMap">
		INSERT INTO REPLY_COMMENTS (
		                            REPLY_REG_NUM
								   , REG_NUM
								   , TOP_REPLY_REG_NUM
								   , COMMENT_DETAIL
								   , DEL
								   , CREATE_USER
								   , CREATE_DATE
								   , UPDATE_USER
								   , UPDATE_DATE)
		VALUES (
		         to_char(sysdate, 'yymmdd') || LPAD(NVL((select MAX(SUBSTR(REPLY_REG_NUM, 7)) + 1 from REPLY_COMMENTS where REPLY_REG_NUM LIKE to_char(sysdate, 'yymmdd') || '%'), '1'), 5, 0)
			   , #{regNum}
			   , #{topReplyRegNum, jdbcType=VARCHAR}
			   , #{commentDetail}
			   , 'N'
			   , #{createUser}
			   , sysdate
			   , #{createUser}
			   , sysdate)
	</insert>

	<!--리뷰 답글 입력-->
	<insert id="topreplyinsetsave" parameterType="hashMap">
		INSERT INTO REPLY_COMMENTS (
		                            REPLY_REG_NUM
								   , REG_NUM
								   , TOP_REPLY_REG_NUM
								   , COMMENT_DETAIL
								   , DEL
								   , CREATE_USER
								   , CREATE_DATE
								   , UPDATE_USER
								   , UPDATE_DATE)
		VALUES 	 (
					 #{replyRegNum}
				   , #{regNum}
				   , to_char(sysdate, 'yymmdd') || LPAD(NVL((select MAX(SUBSTR(TOP_REPLY_REG_NUM, 7)) + 1 from REPLY_COMMENTS where TOP_REPLY_REG_NUM LIKE to_char(sysdate, 'yymmdd') || '%'), '1'), 5, 0)
				   , #{commentDetail}
				   , 'N'
				   , #{createUser}
				   , sysdate
				   , #{createUser}
				   , sysdate)
	</insert>

	<!--리뷰 댓글 수정-->
	<update id="reviewReplyUpdate" parameterType="hashMap">

		UPDATE REPLY_COMMENTS
			SET   COMMENT_DETAIL = #{commentDetail}
		  		, UPDATE_USER = #{createUser}
		  		, UPDATE_DATE = sysdate
		WHERE 1 = 1
		  AND REPLY_REG_NUM = #{replyRegNum}

	</update>


	<!-- 리뷰 댓글 삭제 -->
	<update id="reviewReplyDel" parameterType="hashMap">
		UPDATE REPLY_COMMENTS
			SET DEL = 'Y'
			  , UPDATE_USER = #{createUser}
			  , UPDATE_DATE = sysdate
		WHERE 1 = 1
		  AND REPLY_REG_NUM = #{replyRegNum}
	</update>

	<!--리뷰 댓글 조회-->
	<select id="reviewReplyOut" parameterType="hashMap" resultType="com.example.boardinfo.model.review.dto.ReplyCommentsDTO">
		SELECT RC.REPLY_REG_NUM 		AS REPLYREGNUM
			 , RC.REG_NUM 					AS REGNUM
			 , RC.TOP_REPLY_REG_NUM 			AS TOPREPLYREGNUM
			 , RC.COMMENT_DETAIL 			AS COMMENTDETAIL
			 , M.NICKNAME					AS NICKNAME
			 , RC.DEL 						AS DEL
			 , RC.CREATE_USER				AS CREATEUSER
			 , RC.CREATE_DATE				AS CREATEDATE
			 , RC.UPDATE_USER				AS UPDATEUSER
			 , RC.UPDATE_DATE				AS UPDATEDATE
		FROM REPLY_COMMENTS RC
		   , MEMBER M
		WHERE 1 = 1
			AND RC.REG_NUM = #{reviewDetailKey}
-- 			AND RC.DEL = 'N'
			AND RC.CREATE_USER = M.USERID(+)
		/*답글 진입*/
		<if test="topReplyRegNum != '' and topReplyRegNum != null">
			AND ((RC.TOP_REPLY_REG_NUM = #{topReplyRegNum})
			OR RC.REPLY_REG_NUM=#{ReplyRegNum})
		</if>
		ORDER BY RC.TOP_REPLY_REG_NUM||RC.REPLY_REG_NUM, RC.CREATE_DATE
	</select>








	<insert id="reviewBlob" parameterType="hashMap">
		INSERT INTO REVIEW_IN_TEST (TEST1, BLOB)
		VALUES(#{test1}
			  ,#{blob})
	</insert>




	<!--id로 review list 가져오기-->
	<select id="rvListByUserid" resultType="reviewDto">
		SELECT R.REG_NUM         AS REGNUM
			 , M.USERID
			 , M.NICKNAME
			 , R.CATEGORY
			 , R.VIEWS
			 , C.GNUM,
				(SELECT GAMETITLE
				 FROM GAME
				 WHERE GNUM = C.GNUM) AS GAMETITLE
			 , R.TITLE
			 , R.REVIEW_DETAIL   AS
			REVIEWDETAIL
			 , (SELECT COUNT(1)
				FROM REVIEWGOOD
				WHERE REVIEWPK = R.REG_NUM
				  AND GOOD = 'Y'
				  AND DEL = 'N') AS GOOD
			 , (SELECT COUNT(1) FROM REPLY_COMMENTS WHERE DEL = 'N' AND REG_NUM = R.REG_NUM)
			AS RECNT
			 , R.DEL
			 , R.CREATE_USER     AS CREATEUSER
			 , TO_CHAR(R.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS')
			AS CREATEDATE
			 , R.UPDATE_USER     AS UPDATEUSER
			 , TO_CHAR(R.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS')
			AS UPDATEDATE
		FROM REVIEW R,
			 MEMBER M,
			 CHOICE_GAME C
		WHERE R.CREATE_USER = M.USERID(+)
		  AND R.REG_NUM
			= C.REVIEWREGNUM(+)
		  AND R.DEL = 'N'
		  and R.CREATE_USER = #{userid} /*검색*/ /*디테일 진입*/
		ORDER BY CREATEDATE DESC
	</select>

	<select id="getHomeList" resultType="com.example.boardinfo.model.review.dto.ReviewDTO">
		select *
		from
			(
				select a.*, row_number() over(order by create_date desc) rn
				from
					(
						select reg_num as regNum, category, title, create_date,
							   (
								   select count(*)
								   from reply_comments c
								   where c.reg_num = r.reg_num
							   ) as recnt
						from review r
						where del = 'N'
						order by create_date desc
					)a
			)
		where rn between 1 and #{size}
	</select>

	<select id="getHotList" resultType="reviewDto">
		select 	*
		from    (

		            select  reg_num as regNum, category, title, create_user, views,
		                    (SELECT COUNT(1) FROM REVIEWGOOD WHERE REVIEWPK = R.REG_NUM AND GOOD = 'Y' AND DEL = 'N') AS GOOD,
		                    (SELECT COUNT(1) FROM REPLY_COMMENTS WHERE DEL = 'N' AND REG_NUM = R.REG_NUM) AS RECNT,
		                    row_number() over (order by create_date desc) rnum
		            from    review r
		            where   del='N' and
		                    views > 2 and
		                    (SELECT COUNT(1) FROM REPLY_COMMENTS WHERE REG_NUM = R.REG_NUM) > 1 and
		                    (SELECT COUNT(1) FROM REVIEWGOOD WHERE REVIEWPK = R.REG_NUM AND GOOD = 'Y' AND DEL = 'N') > 1
		        )
				where rnum between 1 and #{size}
	</select>

	<!--인기글 쿼리-->
	<select id="getHotAll" resultType="reviewDto">
		--현재 편의상 조회수 2개이상, 댓글 1개이상, 좋아요 1개이상으로 구성
		select 	*
		from    (
		            select  reg_num as regNum, category, title, create_date as createDate, views, create_user as nickName,
		                    (SELECT COUNT(1) FROM REVIEWGOOD WHERE REVIEWPK = R.REG_NUM AND GOOD = 'Y' AND DEL = 'N') AS GOOD,
		                    (SELECT COUNT(1) FROM REPLY_COMMENTS WHERE DEL = 'N' AND REG_NUM = R.REG_NUM) AS RECNT,
		                    row_number() over (order by create_date desc) rnum
		            from    review r
		            where   del='N' and
		                    views > 2 and
		                    (SELECT COUNT(1) FROM REPLY_COMMENTS WHERE DEL = 'N' AND REG_NUM = R.REG_NUM) > 1 and
		                    (SELECT COUNT(1) FROM REVIEWGOOD WHERE REVIEWPK = R.REG_NUM AND GOOD = 'Y' AND DEL = 'N') > 1
		        )
				where rnum between #{start} and #{end}
	</select>
	<select id="getHotListCnt" resultType="int">
		select  count(*)
		from    review r
		where   del='N' and
		        views > 2 and
		        (SELECT COUNT(1) FROM REPLY_COMMENTS WHERE DEL = 'N' AND REG_NUM = R.REG_NUM) > 1 and
		        (SELECT COUNT(1) FROM REVIEWGOOD WHERE REVIEWPK = R.REG_NUM AND GOOD = 'Y' AND DEL = 'N') > 1

	</select>

	<select id="totalSearch" resultType="reviewDto">
		select	*
		from	(
				select	a.*, rownum rn
				from	(
						select 	reg_num as regNum,
								category,
								title,
								views,
								to_char(create_date, 'yyyy-mm-dd') as createDate,
								(	SELECT 	COUNT(1) FROM REVIEWGOOD WHERE REVIEWPK = R.REG_NUM AND GOOD = 'Y' AND DEL = 'N')
								AS GOOD,
						        (	SELECT 	COUNT(1) FROM REPLY_COMMENTS WHERE DEL = 'N' AND REG_NUM = R.REG_NUM )
						        AS RECNT,
						        (	SELECT 	MAX(B.GAMETITLE) || CASE (COUNT(1)-1) WHEN 0 THEN '' ELSE ' 외 ' || (COUNT(1)-1)END
						        	FROM 	CHOICE_GAME A, GAME B
						        	WHERE 	A.DEL = 'N' AND B.DEL = 'n' AND A.GNUM = B.GNUM AND A.REVIEWREGNUM = R.REG_NUM
						        	GROUP BY A.REVIEWREGNUM )
						        AS GAMETITLE
						from 	review r
						WHERE   regexp_like(title, #{gameKeyword},'i') and del='N' and category in (${boardDivision})
						order by createDate desc
        				) a
        		)
        <choose>
			<when test="filter != null and 'none'.equalsIgnoreCase(filter)">
				where rn between 1 and 6
			</when>
			<otherwise>
				where rn between #{start} and #{end}
			</otherwise>
		</choose>
	</select>

	<select id="totalSearchCount" resultType="int">
		select 	count(*)
		from	review
		where	regexp_like(title, #{gameKeyword},'i') and del='N'
	</select>


</mapper>

