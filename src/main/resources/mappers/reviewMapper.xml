<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 다른 mapper와 중복되지 않도록 네임 스페이스 기재 -->

<mapper namespace="review">

	<!--페이징시작-->
<!--
	<sql id="pagingStart">
		SELECT * FROM (
	</sql>
-->

	<!--페이징종료-->
<!--
	<sql id="pagingEnd">
		) WHERE RNUM BETWEEN #{start} AND #{end}
	</sql>
-->

	<!-- 리뷰 목록 조회 -->
	<select id="reviewList" parameterType="hashMap" resultType="com.example.boardinfo.model.review.dto.ReviewDTO">

<!--
		<include refid = "pagingStart"/>
-->

		SELECT
			   ROWNUM AS RNUM
			 , R.REG_NUM AS REGNUM
		     , M.USERID
			 , M.NICKNAME
			 , R.CATEGORY
			 , R.VIEWS
			 , G.GNUM
			 , G.GAMETITLE
			 , R.GATHERING_ID AS GATHERINGID
			 , R.TITLE
			 , R.FUN_SCORE AS FUNSCORE
			 , R.REVIEW_SCORE AS REVIEWSCORE
			 , R.GAME_SCORE AS GAMESCORE
			 , R.REVIEW_DETAIL AS REVIEWDETAIL
			 , (SELECT COUNT(1) FROM REVIEWGOOD WHERE REVIEWPK = R.REG_NUM AND GOOD = 'Y' AND DEL = 'N') AS GOOD
			 , R.DEL
			 , R.CREATE_USER AS CREATEUSER
			 , TO_CHAR(R.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATEDATE
			 , R.UPDATE_USER AS UPDATEUSER
			 , TO_CHAR(R.UPDATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS UPDATEDATE
		FROM REVIEW R
		   , MEMBER M
		   , GAME G
		WHERE R.CREATE_USER = M.USERID(+)
		  AND R.GNUM = G.GNUM(+)
		  AND R.DEL = 'N'
		  /*검색*/
		<if test="searchTitle != '' and searchTitle != null">
			AND (R.TITLE LIKE '%'||#{searchTitle}||'%'
			OR R.REVIEW_DETAIL LIKE '%'||#{searchTitle}||'%')
		</if>
		  /*디테일 진입*/
		<if test="reviewDetailKey != '' and reviewDetailKey != null">
			AND R.REG_NUM = #{reviewDetailKey}
		</if>
		ORDER BY CREATEDATE

<!--
		<include refid = "pagingEnd"/>
-->

	</select>

	<!-- 리뷰 목록 조회 카운트 -->
	<select id="reviewListCnt" parameterType="hashMap" resultType="int">
		SELECT count(1)
		FROM REVIEW R
		   , MEMBER M
		   , GAME G
		WHERE R.CREATE_USER = M.USERID(+)
		  AND R.GNUM = G.GNUM(+)
		  AND R.DEL = 'N'
		  /*검색*/
		<if test="searchTitle != '' and searchTitle != null">
			AND (R.TITLE LIKE '%'||#{searchTitle}||'%'
			OR R.REVIEW_DETAIL LIKE '%'||#{searchTitle}||'%')
		</if>
		  /*디테일 진입*/
		<if test="reviewDetailKey != '' and reviewDetailKey != null">
			AND R.REG_NUM = #{reviewDetailKey}
		</if>

	</select>

	<!-- 리뷰 입력 -->
	<insert id="reviewInsertPage" parameterType="hashMap">
		INSERT INTO REVIEW (
		                    REG_NUM
		                    , CATEGORY, GNUM
		                    , GATHERING_ID, TITLE
							, REVIEW_DETAIL
							, CREATE_USER
							)
		VALUES(
		       to_char(sysdate, 'yymmdd') || LPAD(NVL((select MAX(SUBSTR(REG_NUM, 7)) + 1 from review where REG_NUM LIKE to_char(sysdate, 'yymmdd') || '%'), '1'),5, 0)
		   	  ,#{category}
			  ,#{gnum}
			  ,#{gatheringId, jdbcType=VARCHAR}
			  ,#{title}
			  ,#{reviewDetail}
			  ,#{createUser}
			  )
	</insert>

	<!-- 리뷰 수정 -->
	<update id="reviewedit" parameterType="hashMap">
		UPDATE REVIEW
		SET CATEGORY = #{category}
		    , TITLE = #{title}
		    , REVIEW_DETAIL = #{reviewDetail}
			, UPDATE_DATE = sysdate
		WHERE 1 = 1
			AND REG_NUM = #{regNum}
	</update>

	<!-- 리뷰 삭제 -->
	<update id="revieweDel" parameterType="hashMap">
		UPDATE REVIEW
		SET DEL = 'Y'
		WHERE 1 = 1
		  AND REG_NUM = #{reviewDetailKey}
	</update>

	<!-- 좋아요 입력 -->
	<insert id="reviewGood" parameterType="hashMap">
		MERGE INTO REVIEWGOOD
		USING dual
		ON (GOODKEY = #{reviewDetailKey}||#{createUser})
		WHEN MATCHED THEN
			UPDATE
			SET REVIEWPK = #{reviewDetailKey}
			   ,GOOD = DECODE(GOOD,'Y','N','Y')
			   ,UPDATE_USER = #{createUser} /*지금 로그인 한 사람 정보가 필요*/
			   ,CREATE_DATE = sysdate
		WHEN NOT MATCHED THEN
			INSERT (GOODKEY, REVIEWPK, GOOD, CREATE_USER, CREATE_DATE)
			VALUES (#{reviewDetailKey}||#{createUser} , #{reviewDetailKey} ,'Y', #{createUser} , sysdate)
	</insert>

	<!-- 리뷰 조회수 증가 -->
	<update id="reviewViews" parameterType="hashMap">
		UPDATE REVIEW
		SET VIEWS = VIEWS+1
		WHERE 1 = 1
			AND REG_NUM = #{reviewDetailKey,jdbcType=VARCHAR} /*null 값 허용 : jdbcType=VARCHAR*/
	</update>


	<!--리뷰 댓글-->
	<insert id="reviewReply" parameterType="hashMap">
		INSERT INTO REPLY_COMMENTS ( REPLY_REG_NUM
								   , REG_NUM
								   , TOP_REPLY_REG_NUM
								   , COMMENT_DETAIL
								   , DEL
								   , CREATE_USER
								   , CREATE_DATE
								   , UPDATE_USER
								   , UPDATE_DATE)
		VALUES ( to_char(sysdate, 'yymmdd') || LPAD(NVL((select MAX(SUBSTR(REPLY_REG_NUM, 7)) + 1 from REPLY_COMMENTS where REPLY_REG_NUM LIKE to_char(sysdate, 'yymmdd') || '%'), '1'), 5, 0)
			   , #{regNum}
			   , #{topReplyRegNum, jdbcType=VARCHAR}
			   , #{commentDetail}
			   , 'N'
			   , #{createUser}
			   , sysdate
			   , #{createUser}
			   , sysdate)
	</insert>

	<!--리뷰 댓글 수정-->
	<update id="reviewReplyUpdate" parameterType="hashMap">

		UPDATE REPLY_COMMENTS
		SET COMMENT_DETAIL = #{commentDetail}
		  , UPDATE_USER = #{createUser}
		  , UPDATE_DATE = sysdate
		WHERE 1 = 1
		  AND REPLY_REG_NUM = #{replyRegNum}

	</update>


	<!-- 리뷰 댓글 삭제 -->
	<update id="reviewReplyDel" parameterType="hashMap">
		UPDATE REPLY_COMMENTS
		SET DEL = 'Y'
		  , UPDATE_USER = #{createUser}
		  , UPDATE_DATE = sysdate
		WHERE 1 = 1
		  AND REPLY_REG_NUM = #{replyRegNum}
	</update>



	<select id="reviewReplyOut" parameterType="hashMap" resultType="com.example.boardinfo.model.review.dto.ReplyCommentsDTO">
		SELECT RC.REPLY_REG_NUM 			AS REPLYREGNUM
			 , RC.REG_NUM 					AS REGNUM
			 , RC.TOP_REPLY_REG_NUM 		AS TOPREPLYREGNUM
			 , RC.COMMENT_DETAIL 			AS COMMENTDETAIL
		     , M.NICKNAME					AS NICKNAME
			 , RC.DEL 						AS DEL
			 , RC.CREATE_USER				AS CREATEUSER
			 , RC.CREATE_DATE				AS CREATEDATE
			 , RC.UPDATE_USER				AS UPDATEUSER
			 , RC.UPDATE_DATE				AS UPDATEDATE
		FROM REPLY_COMMENTS RC
			, MEMBER M
		WHERE 1 = 1
		  AND RC.REG_NUM = #{reviewDetailKey}
		  AND RC.DEL = 'N'
		  AND RC.CREATE_USER = M.USERID(+)
		ORDER BY RC.CREATE_DATE
	</select>















	<insert id="reviewBlob" parameterType="hashMap">
		INSERT INTO REVIEW_IN_TEST (TEST1, BLOB)
		    VALUES(#{test1}
		    		,#{blob})
	</insert>


</mapper>




















