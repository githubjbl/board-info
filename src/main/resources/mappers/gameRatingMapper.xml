<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 다른 mapper와 중복되지 않도록 네임스페이스 기재 -->
<mapper namespace="gameRating">
	<insert id="add">
        insert into game_rating (gnum, userid, rating, weight, participant1, participant2, participant3, participant4, participant5, rating_comment, create_date)
        values (#{gnum}, #{userid}, #{rating}, #{weight}, #{participant1}, #{participant2}, #{participant3}, #{participant4}, #{participant5}, #{rating_comment}, sysdate)
    </insert>


	<insert id="update">
		update game_rating
		set rating=#{rating}, weight=#{weight}, participant1=#{participant1}, participant2=#{participant2}, participant3=#{participant3},
			participant4=#{participant4}, participant5=#{participant5}, rating_comment=#{rating_comment}, update_date = sysdate
		where gnum = #{gnum} and userid = #{userid}
	</insert>


	<insert id="delete">
		delete from game_rating
		where gnum = #{gnum} and userid= #{user_id}
	</insert>

	<select id="avgRatingAndWeight" resultType="HashMap">
		select avg(rating) avgRating, avg(weight) avgWeight, count(*) tot
		from game_rating
		group by gnum
		having gnum = #{gnum}
	</select>


	<select id="getUserRatingPoint" resultType="float">
		select rating from game_rating
		where gnum = #{gnum} and userid = #{user_id}
	</select>


	<select id="getUserRating" resultType="GameRatingDTO">
		select * from game_rating
		where gnum = #{gnum} and userid = #{user_id}
	</select>


	<select id="getOptimumPlayers" resultType="HashMap">
	select
	    COUNT(CASE WHEN participant1 = 1 THEN 1 END) AS best1,
	    COUNT(CASE WHEN participant1 = 2 THEN 1 END) AS good1,
	    COUNT(CASE WHEN participant1 = 3 THEN 1 END) AS bad1,
	    COUNT(CASE WHEN participant2 = 1 THEN 1 END) AS best2,
	    COUNT(CASE WHEN participant2 = 2 THEN 1 END) AS good2,
	    COUNT(CASE WHEN participant2 = 3 THEN 1 END) AS bad2,
	    COUNT(CASE WHEN participant3 = 1 THEN 1 END) AS best3,
	    COUNT(CASE WHEN participant3 = 2 THEN 1 END) AS good3,
	    COUNT(CASE WHEN participant3 = 3 THEN 1 END) AS bad3,
	    COUNT(CASE WHEN participant4 = 1 THEN 1 END) AS best4,
	    COUNT(CASE WHEN participant4 = 2 THEN 1 END) AS good4,
	    COUNT(CASE WHEN participant4 = 3 THEN 1 END) AS bad4,
	    COUNT(CASE WHEN participant5 = 1 THEN 1 END) AS best5,
	    COUNT(CASE WHEN participant5 = 2 THEN 1 END) AS good5,
	    COUNT(CASE WHEN participant5 = 3 THEN 1 END) AS bad5
	FROM game_rating
	where gnum= #{gnum}	
	</select>


	<select id="getRatingStatistic" resultType="ratingStatisticDTO">
		select rating as value, count(rating) as count
		from game_rating
		where gnum = #{gnum}
		group by rating
	</select>


	<select id="getWeightStatistic" resultType="ratingStatisticDTO">
		select weight as value, count(weight) as count
		from game_rating
		where gnum = #{gnum}
		group by weight
	</select>


	<select id="getTopRatings" resultType="gameRatingDTO">
		<choose>
			<when test="user_id != null">
				select *
				from
				(
				select a.*, rownum rn
				from
				(
				select r.userid, nickname, nvl(likeCount,0) likeCount, nvl(myLike,0) myLike, gnum, rating, weight, participant1, participant2,
				participant3, participant4, participant5, rating_comment, to_char(create_date, 'YYYY-MM-dd') create_date
				from game_rating r
				join member m on r.userid = m.userid
				left join
				(
				select count(*) likeCount, writer_id
				from game_rating_like
				where gnum = 20
				group by writer_id
				) l
				on r.userid = l.writer_id
				left join
				(
				select count(*) myLike, writer_id
				from game_rating_like
				where gnum = 20 and user_id = 'kim123'
				group by writer_id
				) u
				on r.userid = u.writer_id
				where r.gnum = 20
				order by likeCount desc, create_date desc
				)a
				)
				where rn <![CDATA[<]]>= 3
			</when>
			<otherwise>
				select *
				from
				(
				select a.*, rownum rn
				from
				(
				select r.userid, nickname, nvl(likeCount,0) likeCount, gnum, rating, weight, participant1, participant2,
				participant3, participant4, participant5, rating_comment, to_char(create_date, 'YYYY-MM-dd') create_date
				from game_rating r
				join member m on r.userid = m.userid
				left join
				(
				select count(*) likeCount, writer_id
				from game_rating_like
				where gnum = #{gnum}
				group by writer_id
				) l
				on r.userid = l.writer_id
				where r.gnum = #{gnum}
				order by likeCount desc, create_date desc
				)a
				)
				where rn <![CDATA[<]]>= #{number}
			</otherwise>
		</choose>
		</select>


	<insert id="likeIt">
		insert into game_rating_like
			(gnum, writer_id, user_id) values(#{gnum}, #{writer_id}, #{user_id})
	</insert>

	<delete id="unLikeIt">
		delete from game_rating_like
		where gnum = #{gnum} and writer_id = #{writer_id} and user_id = #{user_id}
	</delete>

	<select id="rateListbyUserid" resultType="gameRatingDTO">
		select *
		from (select userid,
					 count(l.user_id)                   likeCount,
					 r.gnum,
					 rating,
					 weight,
					 participant1,
					 participant2,
					 participant3,
					 participant4,
					 participant5,
					 rating_comment,
					 to_char(create_date, 'YYYY-MM-dd') create_date
			  from game_rating r
					   left join game_rating_like l on r.userid = l.writer_id
			  where r.userid = #{userid}
			  group by writer_id, userid, r.gnum, rating, weight,
					   participant1, participant2, participant3, participant4, participant5, rating_comment, create_date
			  order by likeCount desc, create_date desc
			 )
	</select>

</mapper>














